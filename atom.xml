<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Theo Andersen Carton]]></title>
  <link href="http://TheoAndersen.github.io/atom.xml" rel="self"/>
  <link href="http://TheoAndersen.github.io/"/>
  <updated>2013-12-09T21:35:06+01:00</updated>
  <id>http://TheoAndersen.github.io/</id>
  <author>
    <name><![CDATA[Theo Andersen Carton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Adaptive Access Layers spike]]></title>
    <link href="http://TheoAndersen.github.io/blog/2013/12/09/adaptive-access-layers-spike/"/>
    
    <updated>2013-12-09T00:00:00+01:00</updated>
    <id>http://TheoAndersen.github.io/blog/2013/12/09/adaptive-access-layers-spike</id>
    
    <content type="html"><![CDATA[<p>After reading Ulrik Born&rsquo;s MSDN article on <a href="http://msdn.microsoft.com/en-us/magazine/dn451442.aspx">Adaptive Access Layers</a> (AAL) and hearing him present it at my company, I thought it would be a nice little exercise to start on a spike of an AAL framework.</p>

<p>The AAL spike code can be found on: <a href="http://www.github.com/TheoAndersen/AdaptiveAccessLayerSpike">github.com/TheoAndersen/AdaptiveAccessLayerSpike</a></p>

<p>The general idea is that every external dependency of the system as ex. database access, logging etc. is handled by an AAL-framework which dynamically creates the implementation of the interfaces you provide from your business logic, to use the external dependencies. So if you need a logging mechanism, you would create an interface with the right attributes to denote that its an interface providing access to the logger. The framework would then create an implementation for the interface and wire it up to the logging part of the framwork, without the code using the interface knowing about this.</p>

<p><img class="center" src="http://TheoAndersen.github.io/assets/aal-class-diagram.png"></p>

<p>This class diagram shows the structure I&rsquo;ve used in the spike. The ITestLogWriter represents an interface created by some business logic. The implementation is dynamically created by the AAL code, which wires it up to the LogContract derived AAL class, which handles the actual logging.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[LogContract]</span>
</span><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">ITestLogWriter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">   [LogEntryContract]</span>
</span><span class='line'>   <span class="kt">string</span> <span class="nf">Log</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="kt">int</span> <span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is how an interface could look like. The implementation that the AAL framework would create to hook this interface would then look like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TestLogWriterImpl</span> <span class="p">:</span> <span class="n">LogContract</span><span class="p">,</span> <span class="n">ITestLogWriter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Log</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="kt">int</span> <span class="n">second</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">object</span><span class="p">[]</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">[</span><span class="m">2</span><span class="p">];</span>
</span><span class='line'>        <span class="n">parameters</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="n">message</span><span class="p">;</span>
</span><span class='line'>        <span class="n">parameters</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="k">base</span><span class="p">.</span><span class="n">ExecuteImpl</span><span class="p">(</span><span class="n">MethodBase</span><span class="p">.</span><span class="n">GetCurrentMethod</span><span class="p">(),</span> <span class="n">parameters</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this would be generated directly in MSIL code. As can be seen from the class diagram as well, the AdaptiveLayerBase implements an ExecuteImpl method which fits together with the standard IL code. This fits together with an abstract Execute method, which is what the specific AAL layers must implement to act on any message executed on an AAL interface.</p>

<p>Now i wont post any crazy IL generating code here, you can look at the github repo yourself for the part i&rsquo;ve tried out, but it doesn&rsquo;t feel to me like very sturdy code. The method i used to find out what IL to write, was that i created the implementation in c# first and then used the &ldquo;ildasm&rdquo; tool to disassemble the dll and watch what IL code it compiled into, so that i could use that as a recipe for my implementation. Still its poor error handling you get when the generated assembly just doesn&rsquo;t work, which is also a good reason to keep the generated IL part as small and simple as possible, and keep the normal c# code doing the lifting.</p>

<h2>Good reasoning behind an advanced implementation</h2>

<p>Now I like the overall reasoning behind this approach, but I&rsquo;m not sure I like the actual solution. The positives are that you enforce seperation of the external dependencies behind interfaces, to make sure that the business logic isn&rsquo;t tangled to much along with other concerns. The interface without a compile time implementation is though a little special. It makes the wiring of all business logic with external dependencies dynamic, so that every request will go through several &lsquo;magic&rsquo; holes in the code all the time. Debugging will be kind of odd as the current position will disappear and (hopefully) appear the right place on the other side.</p>

<p>I do think that the reasoning behind AAL of separating and generalizing/encapsulating external dependencies behind abstractions as interfaces are important in enterprise applications and that the referred anti-patterns are very real. Even though, it is though possible to achieve this if you continuously refactor and improve the code your working on. Much development seems opposed to continuous refactoring and generalization. Developers often just continue in the existing track, and dosen&rsquo;t think to refactor or change what theyr externding to make it better, making it necessary to come up with an architecture/framework like this up front. I think its impressive that Ulriks team has created this architecture and have extended it as much to really improve the productivity of theyr team, but i would optimally like a team to gradually mold a and continuously refactor a system to keep it easy to use and test, without having to create a framework with restrictions on how the developers have to work (even though its an internally developed framework). If we dont get developers to think critically on the code and refactor it, we will just have to create a new framwork to the business logic as well at some time, to keep them from messing that up, and so further.</p>

<h4>Sources:</h4>

<ul>
<li><a href="http://msdn.microsoft.com/en-us/magazine/dn451442.aspx">Adaptive Access Layers + Dependency Injection = Productivity on MSDN by Ulrik Born</a></li>
<li><a href="http://www.github.com/TheoAndersen/AdaptiveAccessLayerSpike">Adaptive Access Layer Spike on Github</a></li>
<li><a href="http://gertgregers.wordpress.com/2013/12/05/simple-adaptive-access-layer-helloworld-sample/">Simple Adaptive Access Layer Helloworld sample (using Roslyn)</a></li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Resources for understanding git]]></title>
    <link href="http://TheoAndersen.github.io/blog/2012/07/22/resources-for-understanding-git/"/>
    
    <updated>2012-07-22T00:00:00+02:00</updated>
    <id>http://TheoAndersen.github.io/blog/2012/07/22/resources-for-understanding-git</id>
    
    <content type="html"><![CDATA[<p>To be good at using git, you need not only to learn it but you need to understand it. Git&#8217;s working seems like magic until you understand why it does what it does.</p>
<p>This is the three best resources i&#8217;ve found for understanding how git works.&nbsp;I&#8217;ve you use git and don&#8217;t know these, i suggest you take a look.&nbsp;</p>
<p><strong>The Git Parable&nbsp;</strong>- (blogpost:&nbsp;<a title="http://tom.preston-werner.com/2009/05/19/the-git-parable.html" href="http://tom.preston-werner.com/2009/05/19/the-git-parable.html">http://tom.preston-werner.com/2009/05/19/the-git-parable.html</a>)<br />Tom Preston-Werner has written a great blogpost describing how you might come to design a VCS like git. Now this is a made up story, but provides insights into the reasoning on the design &nbsp;for git.&nbsp;</p>
<p><strong>Git for Ages 5 and Up</strong> - (presentation: <a title="http://www.youtube.com/watch?v=YwIwi80bXX4" href="http://www.youtube.com/watch?v=YwIwi80bXX4">http://www.youtube.com/watch?v=YwIwi80bXX4</a>)<br />As you probably already know, git works internally with its commits in a graph-structure. This presentation explains and runs through examples in git while illustrating what git does using Tinker Toys. This may sound weird but is actually a great way to understand git&#8217;s internal structure.</p>
<p><strong>Think Like A Git</strong>&nbsp;- (website:&nbsp;<a title="http://think-like-a-git.net/" href="http://think-like-a-git.net/">http://think-like-a-git.net/</a>)<br />A site that more directly describes git for &#8220;Advances beginners&#8221;.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Using unit tests in IOS development]]></title>
    <link href="http://TheoAndersen.github.io/blog/2012/04/27/using-unit-tests-in-ios-development/"/>
    
    <updated>2012-04-27T00:00:00+02:00</updated>
    <id>http://TheoAndersen.github.io/blog/2012/04/27/using-unit-tests-in-ios-development</id>
    
    <content type="html"><![CDATA[<p>Using unit tests in XCode you have the posibility to have two test targets (sub-projects) set up; one for <em>logic tests</em> and one for <em>application tests</em>. So whats the difference?</p>
<p><em>Logic tests</em> run without the Application running, so you wont be able to reach your app-delegate or anything UI related, but you will be able to test POOC&#8217;s (Plain Old Obj-C Classes). The <em>Application Tests</em> target, will start up the simulator and use it to run your unit tests.</p>
<p>When i develop, i normally use the logic tests target for the classes providing domain behaviour. Not having to start up the simulator makes theses tests fast to run, making the feedback cycle shorter and you always want as short a feedback cycle as you can get.&nbsp;So when implementing a new feature i start up with the base domain behaviour and make it run with the logic tests. I then i move to the GUI, which uses this new feature and implement it with tests in the Application tests target. With this working i can then wire up the nibs or similar and start up the simulator to check that the feature works as it should.</p>
<p>It did initially seem a bit odd to have two unit test targets, but being that the one needs the simulator to run it makes sense.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ignoring already committed files]]></title>
    <link href="http://TheoAndersen.github.io/blog/2011/10/18/adding-items-that-dont-seem-to-want-to-be-ignored-to-gitignore-anyway/"/>
    
    <updated>2011-10-18T00:00:00+02:00</updated>
    <id>http://TheoAndersen.github.io/blog/2011/10/18/adding-items-that-dont-seem-to-want-to-be-ignored-to-gitignore-anyway</id>
    
    <content type="html"><![CDATA[<p>Ever added a file to .gitignore and found that it still kept being added to the index? Well this is because git will only ignore files not currently under source control, or only files that its not already tracking.</p>

<p>To fix this, tell git to stop tracking the file:
<pre>
git rm &#8211;cached filename
</pre></p>

<p>This is usable for when you discover a file thats already been commited which should be ignored.</p>

<p>source: <a href="http://stackoverflow.com/questions/1139762/gitignore-file-not-ignoring">stackoverflow</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[James Shore's - Lets Play TDD screencasts]]></title>
    <link href="http://TheoAndersen.github.io/blog/2011/06/07/james-shores-lets-play-tdd-screencasts/"/>
    
    <updated>2011-06-07T00:00:00+02:00</updated>
    <id>http://TheoAndersen.github.io/blog/2011/06/07/james-shores-lets-play-tdd-screencasts</id>
    
    <content type="html"><![CDATA[<p>I recently discovered James Shore&#8217;s most excellent &#8220;Lets Play TDD&#8221; series. It&#8217;s&nbsp;a series of screencasts all of around 15 minuttes, which shows the building of a java application from the start with TDD - and this live, with all the choices and hick-ups and whatever included.&nbsp;</p>
<p>I&#8217;m only just reached episode 22 so far, and he&#8217;s made over a 100 at the time of writing this post. I will highly recommend this to anyone that wants to learn more about TDD in a real project.</p>
<p>As with Kent Becks TDD screencasts, its always great to see the different styles of TDD, i find it a great way to learn more. And James seems to almost produce episodes faster than i have time to watch them :).</p>
<p>First blog post about the series:<a href="http://jamesshore.com/Blog/Lets-Play/Lets-Play-Test-Driven-Development.html">http://jamesshore.com/Blog/Lets-Play/Lets-Play-Test-Driven-Development.html</a></p>
<p>Links to all the posts: <a href="http://jamesshore.com/Blog/Lets-Play">http://jamesshore.com/Blog/Lets-Play</a>/</p>
<p>..great stuff</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Kent Beck TDD screencasts]]></title>
    <link href="http://TheoAndersen.github.io/blog/2011/02/15/kent-beck-tdd-screencasts/"/>
    
    <updated>2011-02-15T00:00:00+01:00</updated>
    <id>http://TheoAndersen.github.io/blog/2011/02/15/kent-beck-tdd-screencasts</id>
    
    <content type="html"><![CDATA[<p>A good resource for anybody wanting to learn more about Test Driven Development, is the 4 screencasts by Kent Beck, which can be bought from The Pragmatic Bookshelf site.   <br /><a href="http://pragprog.com/screencasts/v-kbtdd/test-driven-development">http://pragprog.com/screencasts/v-kbtdd/test-driven-development</a></p>
<p>This is Kent Beck describing the workflow he uses when doing TDD and is a great way to learn a bit more about it.</p>
<p>Here&rsquo;s Mark Needham&rsquo;s comments of the screencasts:   <br /><a href="http://www.markhneedham.com...kent-becks-test-driven-development-screencasts/">http://www.markhneedham.com&#8230;kent-becks-test-driven-development-screencasts/</a></p>
<p>Interesting points to notice about the approach</p>
<ul>
<li><em>He starts of writing the code inside the test</em>, and first pulls it out into its own class when its justified to do so. This way its easier to start, as we don&rsquo;t have to find out how we want the design of the class/classes, before we have the code to put in there.</li>
<li><em>Smaller tests are removed, when bigger tests cover the same parts</em>. As tests must be maintained, it makes sense not to have multiple test covering the same areas.</li>
<li>Kent tries to <em>Call hits shots</em>, when running the unit tests, meaning that he tries to predict if the test is going to evaluate to red or green, as a exercise when TDD&rsquo;ing. </li>
</ul>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Using unit-tests to shorten the feedback cycle]]></title>
    <link href="http://TheoAndersen.github.io/blog/2010/11/14/using-unit-tests-to-shorten-the-feedback-cycle/"/>
    
    <updated>2010-11-14T00:00:00+01:00</updated>
    <id>http://TheoAndersen.github.io/blog/2010/11/14/using-unit-tests-to-shorten-the-feedback-cycle</id>
    
    <content type="html"><![CDATA[<p>The speed of development can be measured in how long it takes to write code, and then how long it takes to test that it works.</p>
<p>Now the normal way of testing is running the system and poke around in the area of the change, to confirm that the change works as it should. This can be very slow if you have to enter multiple hierarchy&#8217;s&nbsp; of nested pages or because the system simply takes a while to load and enter. This is where unit tests can be of help.</p>
<p>Even though you don&rsquo;t buy into the whole idea of covering everything with unit-tests, shortening the feedback cycle will shorten the time i takes to find out if your change works as it should, and this can be helped by testing through a unit-test instead of though the actual system.</p>
<p>I experienced this my self, when building a component that would allow other systems to integrate data our. In this case every request needed to convert input data, validate it, run validation against another external source (returned as json), and then save in the database. Now in this case, i found that creating simple unit tests, for testing the parts allowed me to build this more in component, and much faster, as i was shortening the feedback cycle. Now not every piece of code is straight forward to unit test. But at least evaluating the quickest/easiest way to test a piece of code, should be on every pragmatic programmers backbone.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[A very basic unit test]]></title>
    <link href="http://TheoAndersen.github.io/blog/2010/06/23/the-most-basic-unit-test/"/>
    
    <updated>2010-06-23T00:00:00+02:00</updated>
    <id>http://TheoAndersen.github.io/blog/2010/06/23/the-most-basic-unit-test</id>
    
    <content type="html"><![CDATA[<p>Today i realized what the most basic form of a unit-test is.</p>

<p>It&rsquo;s this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// the account must be reapproved</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">Account</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="n">AccountType</span><span class="p">.</span><span class="n">Normal</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Account</span><span class="p">.</span><span class="n">ApprovalExpiryDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was looking at a similar piece of code on the project i&rsquo;m currently developer on at work, and was wondering why the first line of comments were there (i hate unnecessary comments, which clutter the meaning of the code). And then i realized that even though the first line of comments is clearly repeating whats really easily read in the expression in the if statement, it is making sure that that&rsquo;s what should be in the if-expression. If someone were to change the expression we would still have that line of code to make sure that the expression was what was originally intended.</p>

<p>Normally i wouldn&rsquo;t write the first line of comments, but only the second as it describes why we set the accounts ApprovalExpiryDate to the current DateTime, which isn&rsquo;t very clear. Even better would though be to extract the line in the if into a method that expressed what we try to explain in that comment line (SetAccountToBeReapproved() or something).</p>

<p>Now this is a stupid example yes, but the testing mindset is there. The best solution, and next step would then be to have a unit test check this, and enforce it automatically instead.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[VS2008 .suo file rant]]></title>
    <link href="http://TheoAndersen.github.io/blog/2010/03/30/vs2008-suo-file-rant/"/>
    
    <updated>2010-03-30T00:00:00+02:00</updated>
    <id>http://TheoAndersen.github.io/blog/2010/03/30/vs2008-suo-file-rant</id>
    
    <content type="html"><![CDATA[<p>Recently Visual Studio 2008 has begun to act very slowly, taking minutes to start and shutdown whilst showing the grayed &#8220;not responding&#8221; at the same time, because windows can&#8217;t figure out what it&#8217;s doing either. I started uninstalling plugins as CodeRush, GitExtensions etc, but it didn&#8217;t help. Then googling the problem i found a suggestion as to remove the .suo file that lies in the same folder as the .sln file, and it worked! :S</p>
<p>Removing the .suo file which was about 50mb, took the visual studio ram usage from just over 1gb to 100mb, and Visual Studio is now much more responsive also. Very odd, but it seems a lot of people has the same experience. Sure hope this becomes better / more solid in VS2010.</p>
<p>So if Visual Studio begins to slow up, and take a lot of ram, then try renaming the .suo to .suoold or something, and see if it doesn&#8217;t help the performance. :)</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Quick-quick guide to the VI-editior in Git bash]]></title>
    <link href="http://TheoAndersen.github.io/blog/2010/03/20/quick-quick-guide-to-the-vi-editior-in-git-bash/"/>
    
    <updated>2010-03-20T00:00:00+01:00</updated>
    <id>http://TheoAndersen.github.io/blog/2010/03/20/quick-quick-guide-to-the-vi-editior-in-git-bash</id>
    
    <content type="html"><![CDATA[<p>Two modes: command (the initial) and type   <br /> <br /><strong>Commands:</strong></p>
<table style="width: 550px;" border="0" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td width="89" valign="top">&lsquo;i&rsquo;</td>
<td width="459" valign="top">goes to Type-mode (where you can type like a normal notepad document)</td>
</tr>
<tr>
<td width="89" valign="top">&lsquo;esc&rsquo;</td>
<td width="459" valign="top">Goes to Command-mode</td>
</tr>
</tbody>
</table>
<p><strong>Quitting</strong>: (from command-mode)</p>
<table style="width: 551px;" border="0" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td width="91" valign="top">&lsquo;:wq&rsquo; + enter</td>
<td width="458" valign="top">Quit and save</td>
</tr>
<tr>
<td width="91" valign="top">&lsquo;:q!&rsquo; + enter</td>
<td width="458" valign="top">Quit and don&rsquo;t save</td>
</tr>
</tbody>
</table>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Solution to slow Git bash when logged in as a domain user]]></title>
    <link href="http://TheoAndersen.github.io/blog/2010/03/19/solution-to-slow-git-bash-when-logged-in-as-a-domain-user/"/>
    
    <updated>2010-03-19T00:00:00+01:00</updated>
    <id>http://TheoAndersen.github.io/blog/2010/03/19/solution-to-slow-git-bash-when-logged-in-as-a-domain-user</id>
    
    <content type="html"><![CDATA[<p>Today i found that my newly installed git on my laptop at work was working pretty slow. 0.5 ~ 1sec delay on loading the git bash, and on every command. I logged in as a local user on the computer and the delay was gone.</p>

<p>Searching the internet a bit, i found that git uses the default home, on my account set to be a network account. This ment that git would look in this directory all the time, causing the delay.</p>

<p>To fix this i created a local user environment variable, overriding the default one, and setting it to %USERPROFILE% which points at c:\users[username].</p>

<p><img src="http://TheoAndersen.github.io/assets/slow_git_bash_1.png" alt="" /></p>

<p>This makes git look the right place for the git.config.   <br />    <br />Next is that when you click the git bash shortcut, i opened on my default homedrive, which was a network connection.&#160; Looking at the properties for the shortcut it looks like this:</p>

<p><img src="http://TheoAndersen.github.io/assets/slow_git_bash_2.png" alt="" /></p>

<p>Changing the &ldquo;Start in&rdquo; to c:\user[user], or any other place made the shortcut open much faster for me.</p>

<p>Now my git bash is back and fast again :)</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Calling ASP.NET AJAX web-services from JQuery]]></title>
    <link href="http://TheoAndersen.github.io/blog/2009/10/11/calling-aspnet-ajax-web-services-from-jquery/"/>
    
    <updated>2009-10-11T00:00:00+02:00</updated>
    <id>http://TheoAndersen.github.io/blog/2009/10/11/calling-aspnet-ajax-web-services-from-jquery</id>
    
    <content type="html"><![CDATA[<p>I recently looked into calling ASP.NET Ajax web-services from JQuery, and it&rsquo;s actually not that hard.</p>
<h2>The ASP.NET Ajax web-service</h2>
<p>To create a client script enabled web-service, add the [ScriptService] to the web service class. This makes sure that the methods can be called from client script and also makes the returntype a JSON.</p>
<pre class="brush: csharp; gutter: false">[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
[ScriptService]
public class AjaxWebservice : System.Web.Services.WebService
{
    [WebMethod]
    public string HelloWorld()
    {
        return "Hello World - " + DateTime.Now.ToShortTimeString();
    }

    [WebMethod]
    public object HelloObject(int id)
    {
        return new { Id = id, Success = true, Text="&lt;b&gt;It went well!&lt;/b&gt;" };
    }
}</pre>
<p>Note that the returned object in the last webservice method, is converted to a JSON object, which we will see shortly can be used very easily in the client.</p>
<h2>The client-side JQuery ajax call</h2>
<p>Now we have the ajax web service done, in .net manner, we would like to use JQuery&rsquo;s easy and simple interface to consume it.</p>
<p>The default way to create an asynchronous client side call using JQuery is via an $.ajax() call <br />( see <a href="http://docs.jquery.com/Ajax">http://docs.jquery.com/Ajax</a> for more details on this)</p>
<p>The client-side script able to consume the HelloObject webmethod, looks like this:</p>
<pre class="brush: js; gutter: false">$.ajaxSetup({
  type: "POST",
  contentType: "application/json; charset=utf-8",
  data: "{}",
  dataFilter: function(data) {
    var msg;

    if (typeof (JSON) !== 'undefined' &amp;&amp;
    typeof (JSON.parse) === 'function')
      msg = JSON.parse(data);
    else
      msg = eval('(' + data + ')');

    if (msg.hasOwnProperty('d'))
      return msg.d;
    else
      return msg;
  }
});

$.ajax({
  url: "AjaxWebservice.asmx/HelloObject",
  data: "{id:3}",
  success: function(msg) {
    if (msg.Success) {
      alert("yes: " + msg.Text + "(" + msg.Id + ")");
    }
    else {
      alert("nop: " + msg.Text + "(" + msg.Id + ")");
    }
  }
});</pre>
<p>The first $.ajaxSetup() part, sets the default values for all subsequent ajax calls, and the last $.ajax() call makes the asynchronous request to the server. The dataFilter function is supposed to even out some of the variations, different version of net handle JSON, but i haven&rsquo;t gone that much in detail with it. ( go here to read more about it : <a href="http://encosia.com/2009/07/21/simplify-calling-asp-net-ajax-services-from-jquery/">http://encosia.com/2009/07/21/simplify-calling-asp-net-ajax-services-from-jquery/</a>)</p>
<p>This example calls the the webserver with an id having the value two, which then responds with a JSON object. When the client side successfully completes the request, it creates an alertbox from the data in the returned JSON object.</p>
<p>Sources: <br /><a href="http://encosia.com/2009/07/21/simplify-calling-asp-net-ajax-services-from-jquery/">http://encosia.com/2009/07/21/simplify-calling-asp-net-ajax-services-from-jquery/</a> <br /><a href="http://encosia.com/2008/06/05/3-mistakes-to-avoid-when-using-jquery-with-aspnet-ajax/">http://encosia.com/2008/06/05/3-mistakes-to-avoid-when-using-jquery-with-aspnet-ajax/</a> <br /><a href="http://docs.jquery.com/Ajax">http://docs.jquery.com/Ajax</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Git - Fast distributed code versioning]]></title>
    <link href="http://TheoAndersen.github.io/blog/2009/09/24/git-e28093-fast-distributed-code-versioning/"/>
    
    <updated>2009-09-24T00:00:00+02:00</updated>
    <id>http://TheoAndersen.github.io/blog/2009/09/24/git-e28093-fast-distributed-code-versioning</id>
    
    <content type="html"><![CDATA[<p>In case you haven&rsquo;t noticed, there&#8217;s a new code versioning system around, that&#8217;s gaining popularity fast.</p>
<p>Meet Git.. :)   <br /><a href="http://git-scm.com/" target="_blank"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" src="http://TheoAndersen.github.io/assets/git.png" border="0" alt="image" width="606" height="87" /></a>&nbsp; <br />(click to open git&rsquo;s homepage)</p>
<p>Now i am just starting to lean git, but as far as I&#8217;ve understood, here&#8217;s are some of the main points:</p>
<ul>
<li><strong>Distributed model, as opposed to the normal centralized model from CVS and Subversion</strong> &ndash; this means that you don&rsquo;t see your versioning as working from one place all the time. You have your own repository that you commit to, and then you pull or push your changes to or from others from that. </li>
<li><strong>Your repository contains the whole history of git (the whole thing) locally</strong>&nbsp; &ndash;<strong> that both means that diff&rsquo;s and history lookups are dead fast</strong> &ndash; and also that you have images of everything lying on every person on the projects computer. </li>
<li><strong>Git tracks content not files</strong> &ndash; this means that there&#8217;s better code-tracking even across files, and also makes it easier for it to merge content. </li>
<li><strong>Open source and made by Linus Thorvalds and his team</strong> &ndash; is currently used for versioning the Linux kernel. </li>
<li><strong>Most open source projects around are currently converting from subversion to it</strong>, because the distributed model suits open source project much better &ndash; also there&#8217;s free hosting for open source projects on <a href="http://github.com/" target="_blank">Github</a>. </li>
</ul>
<p>On Git&rsquo;s homepage you can find information, tutorials, and also a nice video of Linus expressing his view on code versioning.    <br /> <br />Now git is developed on linux, but there&#8217;s a port for Windows called <a href="http://code.google.com/p/msysgit/downloads/list" target="_blank">msysGit</a> and extensions which add a nicer gui and visual studio support on sourceforge (<a href="http://sourceforge.net/projects/gitextensions/" target="_blank">GitExtensions</a>)</p>
<p>Now it seems that git is stronger and faster than Subversion which we normally use on our projects (or Team Foundation), but there&#8217;s a slight learning hump to start with, as most people are used to a centralized versioning model, as CVS, SVN and Team Foundation (although you can of cause use a central repository with git also). Once people get more acquainted with git I&#8217;m sure it will gain even more popularity.</p>
<p>That&#8217;s all for now on Git - once I&#8217;ve played around with it some more I&#8217;ll write another post about my experiences.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[JQuery - Smarter client scripting]]></title>
    <link href="http://TheoAndersen.github.io/blog/2009/08/28/jquery-e28093-smarter-client-scripting/"/>
    
    <updated>2009-08-28T00:00:00+02:00</updated>
    <id>http://TheoAndersen.github.io/blog/2009/08/28/jquery-e28093-smarter-client-scripting</id>
    
    <content type="html"><![CDATA[<p>Web developers should already be familiar with JQuery. It&#8217;s an opensouce JavaScript library that makes writing simpler and more effective JavaScript possible. And it&#8217;s made to abstract away differences between browsers.</p>
<p>Actually it requires nothing more than a JavaScript library that you download and reference. <br /><br />Normally i would show some JQuery code here, but as i&#8217;m myself just starting learning and using JQuery, I will just tell you that there&#8217;s a good tutorial and info about JQuery on its site: <a href="http://jquery.com/">http://jquery.com/</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Yet another development blog online.]]></title>
    <link href="http://TheoAndersen.github.io/blog/2009/07/24/yet-another-development-blog-onlinee280a6/"/>
    
    <updated>2009-07-24T00:00:00+02:00</updated>
    <id>http://TheoAndersen.github.io/blog/2009/07/24/yet-another-development-blog-onlinee280a6</id>
    
    <content type="html"><![CDATA[<p>This is the beginning of yet another development blog, mostly oriented on .NET development.</p>
<p>I&rsquo;m an software engineer, just in the beginning of my career and as I&#8217;m learning and expanding my knowledge and skills, I&#8217;ve decided to create a blog, thinking that it will make me improve my own skills sharing the knowledge.&nbsp; <br /> <br />How?.. well:</p>
<ul>
<li>Blogging interesting or tricky subjects forces me to work the subject to present it in an understandable manner &ndash; which will give me a better understanding of the topic </li>
<li>This is the place i can go to for all my future &ldquo;How the #&curren;#&rdquo; did i do that&rdquo; -experiences </li>
<li>Eventually someone will click the wrong link somewhere, or write the wrong url in the browser, and end on my blog - and perhaps that someone will comment a post, and make me learn something i got wrong, or something that could have been done different. It&rsquo;s all about sharing and learning </li>
<li>And finally&hellip; I use blogs all the time when ever I&rsquo;m sorting out some problem or learning about a new development topic, it&rsquo;s time to give something back, and perhaps somebody somewhere will benefit of it. </li>
</ul>
<p>So I&#8217;ll try to keep putting tricks, thoughts or anything I find interesting and useful on this blog. Maybe I&#8217;ll even find a name for it one day.</p>
]]></content>
    
  </entry>
  
</feed>