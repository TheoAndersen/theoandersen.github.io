* Remember
- It needs gem install bundler
- It needs Gem install jekyll
rake preview
rake generate
use pow (search for it) to make the local webserver always there
* Idea for showing a refactoring in a blog post
Make a sort of code-field, where you have arrows on the side, with explaining text underneith and can switch left or right to show the refactorings of the code

  ---------------
< |             | >
< |  <code>     | >
  _______________
 (explaining text)

- Maybe make it possible to use arrow keys to switch left and right in the refactoring
- Make the refactored changes bold
- Maybe tabs with different files, or just keep them above each other
- Some easy way of keeping the whole refactoring in a file.. uhmm.. maybe a small git repo? (perhaps not portable enough)

* Idea´s for future posts
** -=Git/Tfs=-
*** Why i don't like TFS but like Git
- Points that i can do in TFS, can i do them in git? how
- Points i can in git but cant in TFS
- How do i identify code versions that has been changed the most.. (files at first)

More about Microsofts comparisons of Git vs TFS
(much of it is based on Microsofts use of git - not git it self)
http://msdn.microsoft.com/en-us/library/ms181368.aspx#tfvc_or_git_summary

**** Git vs TFS
|-----------------+---------------+-------------------------|
|                 | =GIT=         | =TFS=                   |
|-----------------+---------------+-------------------------|
| Branching       | project-based | folder-based            |
|-----------------+---------------+-------------------------|
| local branches  | Yes           | No                      |
|-----------------+---------------+-------------------------|
| Most operations | local only    | connected to TFS server |
|-----------------+---------------+-------------------------|
| VCS model       | Distributed   | Centralized             |
|-----------------+---------------+-------------------------|
|                 |               |                         |

**** Points to investigate
***** A TFS Merge squashes commits to one new one created in the new branch
***** Annotate/Blame
***** Rollback one or multiple items
***** Cherry pick commits when merging
***** "Baseless" merges (is there such a thing in git at all - dosen't it just work?)
***** (new) Ability to easily go forward/backwards with versioning of a file (+ keep position)

** -=NoSQL / RavenDB topics=-
*** DONE About my professional master thesis on RavenDB (A case study of the document database RavenDB)
About what i did, when i did it
And what i found in a heli overview
*** NoSQL - what a shitty name
Tag udsnit stort set fra min rapport og forklar hvorfor nosql er et dårligt navn.. nonRel?
*** RavenDB Architecture
*** Document database modelling versus relational modelling
Denormalisering i RavenDB versus normalisering i relationel databas
*** NoSQL - Integration versus application databas
** -=Process=-
*** Running Scrum by the book - Noget om hvorfor jeg tit er irritereet på scrum ("Vi kører scrum efter bogen")
*** Keep your eye on the ball - Value proposition anyone?
*** If you don't stand up to your customers, you're gonna loose them
*** Agile and Flaccid scrum
** -=Better Code/Common antipatterns=-
*** Classofobia? The fear of creating new classes
Hvorfor faen virker det somom at udviklere ikke bryde sig om at lave nye klasser?
- Er det objekter de ikke kan lide?
- Er det filer?
- Er det fordi de føler at man skal vide mere om systemet for at lave klasser istedet for nye metoder?

De fleste kan aller bedst lide bare at lave en ny funktion i samme dur som noget eksisterende.
Det kan gøre at man ender med antipatterns som er fulde af få meget store og meget statiske filer, hvilket er svært at håndtere, udvide samt teste, samt versionere,
fordi man oftere ændrer i de samme filer.

_Reasons for creating a new class_

*** The Helper anti-pattern (utility pattern)
 - _Helper files_
   A file thats called helper, and includes a lot of different

it's all about context.. a file of any type, with methods that dosen't align up with the purpose of the class is a problem, it becomes a problem and a trashcan for all kinds of functionality.

Sources:
http://scottboring.com/the-helper-anti-pattern/
http://blogs.msdn.com/b/nickmalik/archive/2005/09/06/461404.aspx
http://blogs.msdn.com/b/nickmalik/archive/2005/09/07/462054.aspx

*** The Layer anti-pattern
 - _Files that end with the name layer (OrderBLL.cs, OrderLayer.cs)_
   A layer in your app shouln't be constricted to a single file -
     -It makes the overall behavious of your application hidden from the directory structure, as all you can see is that its about the order
     -Makes dependencies a mess, as every method either has to generate/fetch its dependencies by it self in the function, or you have to generalize dependencies across in the constructor
     -Basically makes people not want to create private methods, as they will get kind of lost in the file (does this private method belong to this public class or another?)
   Possible solutions: Use a command like pattern structure, where your layer is a directory if you will, and a class consists of a business command/transaction that can be executed

Business command

Uncle bobs business command
*** Internal classes
Theyr not all evil.. Can actually be usefull

example: RavenDB Index'es and Model an index works on

Command pattern.. request response as internal classes
*** Controlling your steps using TDD
Explain the steps again
but include help from James Shore and Kent Beck

Explain why it should be like this?

1) Create a test - invent the API of your choice
   It might go red
   Or it might not compile

2) Make it compile and get green fast
   Don't do it the nice way - hard code.. commit the sins you want to get green

3) Refactor it to remove duplication, make it more general. nicer
   Keep the green but remove the duplication (also between testcase and code)
